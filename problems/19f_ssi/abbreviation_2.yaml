problem_name: abbreviation_2

algorithm_description:



problem_description: |
  <h4>Problem</h4>
  In this problem, we'll be working to create an Abbreviation class to help
  find and shorten words.<br><br>

  We'll work on a <code>minimal_abbreviation</code> method. The <code>Abbreviation</code>
  object is constructed with a list of full words. Below is the docstring for
  <code>minimal_abbreviation</code><br><br>

  <pre><code>
  def minimal_abbreviation(self, cmnd):
    """The string, S, of shortest length such that
    self.minimal_abbreviation(S) == cmnd.

    >>> a = Abbreviation(['continue', 'catch', 'next',
    ...                   'st', 'step', 'command'])
    >>> a.minimal_abbreviation('continue')
    'con'
    >>> a.minimal_abbreviation('next')
    'n'
    >>> a.minimal_abbreviation('step')
    'ste'
    >>> a.minimal_abbreviation('ste')
    'error: ste not found'
    """
  </code></pre>

initial_code: >
  def coin_winner(row1, row2, curr, other):

code_lines: |
  class Abbreviation:#0given
  def __init__(self, full_words):#1given
  self.__words = list(full_words)#2given
  def minimal_abbreviation(self, cmnd):#1given
  if cmnd not in self.__words:
  return "error: {0} not found".format(cmnd)
  for i in range(1, len(cmnd) + 1):
  if self.complete(cmnd[:i]) == cmnd:
  return cmnd[:i]

solution: |

test_code: |
  def complete(self, cmnd):
    words = ['continue', 'catch', 'next', 'st', 'step', 'command']
    found_word = None
    for word in words:
      if cmnd == word:
        return word
      if cmnd == word[:len(cmnd)]:
        if found_word is not None:
          return 'error: not unique'
        found_word = word
    if found_word is None:
      return 'error: {0} not found'.format(cmnd)
    return found_word
  setattr(Abbreviation, 'complete', complete)

  abbreviation = Abbreviation(['continue', 'catch', 'next', 'st', 'step', 'command'])
  def minimal_abbreviation(cmnd):
    return abbreviation.minimal_abbreviation(cmnd)

test_fn: minimal_abbreviation

test_cases:
  - fn_args: ['continue']
    expected: 'con'
  - fn_args: ['next']
    expected: 'n'
  - fn_args: ['step']
    expected: 'ste'
  - fn_args: ['ste']
    expected: 'error: ste not found'
