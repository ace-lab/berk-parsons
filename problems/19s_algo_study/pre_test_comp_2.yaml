- intro:
  name: Instructions
  components:
    - type: problem_description
      text: >
        For the following questions, please answer them to the best of your
        ability. It is not expected that you'll be able to answer all of the
        questions within the time limit. You will have a maximum of 10 minutes
        for this section, and can answer the questions in any order. If you 
        would like to move on before then, you may, but you will be unable to
        revisit these questions.
- dfs:
  name: Depth-First Search (DFS)
  components:
    - type: problem_description
      text: >
        Given the following graph, mark the order in which the each vertex
        is entered and exited (or start and finish times). This is the version
        of DFS which will not complete until all nodes have been visited. 
        Assume the algorithm
        will select vertices alphabetically to break ties. For example, it will
        begin the first search with vertex A (first alphabetically).
    - type: image
      path: /static/images/graph.png
      subscript: Created with https://www.nctm.org/Classroom-Resources/Illuminations/Interactives/Graph-Creator/
    - type: free_form_prompt
      name: dfs_a_enter
      text: A.enter
      ans: 1
    - type: free_form_prompt
      name: dfs_a_exit
      text: A.exit
      ans: 12
    - type: free_form_prompt
      name: dfs_b_enter
      text: B.enter
      ans: 2
    - type: free_form_prompt
      name: dfs_b_exit
      text: B.exit
      ans: 7
    - type: free_form_prompt
      name: dfs_c_enter
      text: C.enter
      ans: 8
    - type: free_form_prompt
      name: dfs_c_exit
      text: C.exit
      ans: 9
    - type: free_form_prompt
      name: dfs_d_enter
      text: D.enter
      ans: 10
    - type: free_form_prompt
      name: dfs_d_exit
      text: D.exit
      ans: 11
    - type: free_form_prompt
      name: dfs_e_enter
      text: E.enter
      ans: 13
    - type: free_form_prompt
      name: dfs_e_exit
      text: E.exit
      ans: 14
    - type: free_form_prompt
      name: dfs_f_enter
      text: F.enter
      ans: 3
    - type: free_form_prompt
      name: dfs_f_exit
      text: F.exit
      ans: 6
    - type: free_form_prompt
      name: dfs_g_enter
      text: G.enter
      ans: 4
    - type: free_form_prompt
      name: dfs_g_exit
      text: G.exit
      ans: 5
- bfs:
  name: Breadth-First Search (BFS)
  components:
    - type: problem_description
      text: >
        Given the following graph, mark the order visited (or enter time)
        for each vertex. This is the version
        of BFS which will not complete until all nodes have been visited.
        Assume the algorithm will select vertices
        alphabetically to break ties. For example, it will begin with vertex A.
    - type: image
      path: /static/images/graph.png
      subscript: Created with https://www.nctm.org/Classroom-Resources/Illuminations/Interactives/Graph-Creator/
    - type: free_form_prompt
      name: bfs_a
      text: A
      ans: 1
    - type: free_form_prompt
      name: bfs_b
      text: B
      ans: 2
    - type: free_form_prompt
      name: bfs_c
      text: C
      ans: 3
    - type: free_form_prompt
      name: bfs_d
      text: D
      ans: 4
    - type: free_form_prompt
      name: bfs_e
      text: E
      ans: 7
    - type: free_form_prompt
      name: bfs_f
      text: F
      ans: 5
    - type: free_form_prompt
      name: bfs_g
      text: G
      ans: 6
- top_sort:
  name: Topological Sort
  components:
    - type: problem_description
      text: >
        Given the following graph, what is a possible ordering that might be
        returned by a topological sort? Please give your answer as a
        comma-separated list (for example, "A, B, C").
    - type: image
      path: /static/images/graph2.png
      subscript: Created with https://www.nctm.org/Classroom-Resources/Illuminations/Interactives/Graph-Creator/
    - type: free_form_prompt
      name: top_sort
      text: Topological sort ordering
      ans: B,A,C,D,E
- trie_huff:
  name: Tree Comparison
  components:
    - type: problem_description
      text: >
        The following questions will ask about properties of the trees 
        generated by tries (prefix trees) and the Huffman coding algorithm.
        For the prefix trees, assume there are only english lower-case letters.
- tri_huff_num_children:
  name: Tree Comparison Q1
  components:
    - type: problem_description
      text: >
        How many children can a vertex have, including terminal vertices?
        Please list all possible values. If the answer is a range, it can
        be expressed in the format "3-5". If the answer is a list, please
        comma separate the values, for example "3, 4, 5".
    - type: free_form_prompt
      name: num_children_trie
      text: Trie (prefix tree)
      ans: 0-26
    - type: free_form_prompt
      name: num_children_huffman
      text: Huffman Coding tree
      ans: 0, 2
- tri_huff_letters:
  name: Tree Comparison Q2
  components:
    - type: problem_description
      text: >
        Which vertices in the trees represent letters?
    - type: multiple_choice
      name: letters_trie
      text: Trie (prefix tree)
      choices:
        - All vertices
        - Leaves
        - Non-leaves
        - Another subset of verticees
        - Letters are not represented
      ans: All vertices
    - type: multiple_choice
      name: letters_huffman
      text: Huffman Coding tree
      choices:
        - All vertices
        - Leaves
        - Non-leaves
        - Another subset of verticees
        - Letters are not represented
      ans: Leaves
- tri_huff_words:
  name: Tree Comparison Q3
  components:
    - type: problem_description
      text: >
        Which vertices in the trees represent the ends of words?
    - type: multiple_choice
      name: words_trie
      text: Trie (prefix tree)
      choices:
        - All vertices
        - Leaves
        - Non-leaves
        - Another subset of verticees
        - Letters are not represented
      ans: Another subset of vertices, Leaves
    - type: multiple_choice
      name: words_huffman
      text: Huffman Coding tree
      choices:
        - All vertices
        - Leaves
        - Non-leaves
        - Another subset of verticees
        - Letters are not represented
      ans: Letters are not represented
- tri_huff_depth:
  name: Tree Comparison Q4
  components:
    - type: problem_description
      text: >
        What determines the depth of the tree?
    - type: multiple_choice
      name: depth_trie
      text: Trie (prefix tree)
      choices:
        - Total number of words
        - Number of unique words
        - Total number of letters
        - Number of unique letters
        - Length of words
        - None of the above
      ans: Length of words
    - type: multiple_choice
      name: depth_huffman
      text: Huffman Coding tree
      choices:
        - Total number of words
        - Number of unique words
        - Total number of letters
        - Number of unique letters
        - Length of words
        - None of the above
      ans: Number of unique letters

    # problem_description: foo
    # code_snippet: foo
    # algorithm_description: bar
    # initial_code:

# name
# problem_description
# algorithm_description
# code_snippet (for input/output)
# choices --> MCQ
# free_form_prompts --> Short answer, with human text
# 
# Code reading questions?
